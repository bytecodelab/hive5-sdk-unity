// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using WebSocketSharp;

namespace Hive5
{
    public class Hive5Spider
    {
        private static readonly string TopicPrefix = "io.hive5.spider.topic";

        private static readonly string TopicNameChannel = "channel";
        private static readonly string TopicNamePrivate = "private";
        private static readonly string TopicNameNotice = "notice";
        private static readonly string TopicNameSystem = "system";

        public long SessionId { get; set; }

        private const string RouterEndPoint = "ws://beta.spider.hive5.io:9201/channels/ws";
        private Hive5Client hive5Client { get; set; }


        public enum TopicKind
        {
            Channel,
            Private,
            Notice,
            System, // Hive5 System
        };

        private WebSocket mySocket { get; set; }

        public Hive5Spider(Hive5Client client)
        {
            if (client == null)
                throw new NullReferenceException();

            this.mySocket = new WebSocket(Hive5Spider.RouterEndPoint);
            this.mySocket.OnOpen += mySocket_OnOpen;
            this.mySocket.OnError += mySocket_OnError;
            this.mySocket.OnMessage += mySocket_OnMessage;
            this.mySocket.OnClose += mySocket_OnClose;

            this.hive5Client = client;
        }

        public string GetTopicUri(TopicKind kind)
        {
            string topicName = "";
            switch (kind)
            {
                case TopicKind.Channel:
                    topicName = TopicNameChannel;
                    break;

                case TopicKind.Notice:
                    topicName = TopicNameNotice;
                    break;

                case TopicKind.Private:
                    topicName = TopicNamePrivate;
                    break;

                case TopicKind.System:
                    topicName = TopicNameSystem;
                    break;
            }

            return string.Concat(Hive5Spider.TopicPrefix, topicName);
        }

        public void Hello(long channelId)
        {
            HelloMessage message = new HelloMessage()
            {
                Realm = new Realm(channelId),
                Detail = new HelloDetail()
                {
                    app_key = this.hive5Client.AppKey,
                    auth_token = this.hive5Client.AccessToken,
                    channel_id = channelId,
                    uuid = this.hive5Client.Uuid,
                },
            };

            this.mySocket.SendAsync(message.ToString(), HelloCompleted);
        }

        public void HelloCompleted(bool success)
        {

        }

        public void ConnectAsync()
        {
            mySocket.Connect();
        }

        void mySocket_OnClose(object sender, CloseEventArgs e)
        {
        }

        void mySocket_OnMessage(object sender, MessageEventArgs e)
        {
            SpiderMessage message = MessageParser.Parse(e.Data);
            if (message == null)
                return;

            switch ((WampMessageCode)message.MessageCode)
            {
                case WampMessageCode.HELLO:
                    break;
                case WampMessageCode.WELCOME:
                    {
                        WelcomeMessage welcomeMessage = message as WelcomeMessage;
                        this.SessionId = welcomeMessage.SessionId;
                        OnConnected();
                        return;
                    }
                    break;
                case WampMessageCode.ABORT:
                    break;
                case WampMessageCode.CHALLENGE:
                    break;
                case WampMessageCode.AUTHENTICATE:
                    break;
                case WampMessageCode.GOODBYE:
                    break;
                case WampMessageCode.HEARTBEAT:
                    break;
                case WampMessageCode.ERROR:
                    break;
                case WampMessageCode.PUBLISH:
                    break;
                case WampMessageCode.PUBLISHED:
                    break;
                case WampMessageCode.SUBSCRIBE:
                    break;
                case WampMessageCode.SUBSCRIBED:
                    break;
                case WampMessageCode.UNSUBSCRIBE:
                    break;
                case WampMessageCode.UNSUBSCRIBED:
                    break;
                case WampMessageCode.EVENT:
                    break;
                case WampMessageCode.CALL:
                    break;
                case WampMessageCode.CANCEL:
                    break;
                case WampMessageCode.RESULT:
                    break;
                case WampMessageCode.REGISTER:
                    break;
                case WampMessageCode.REGISTERED:
                    break;
                case WampMessageCode.UNREGISTER:
                    break;
                case WampMessageCode.UNREGISTERED:
                    break;
                case WampMessageCode.INVOCATION:
                    break;
                case WampMessageCode.INTERRUPT:
                    break;
                case WampMessageCode.YIELD:
                    break;
                default:
                    break;
            }

        }

        void mySocket_OnError(object sender, ErrorEventArgs e)
        {

        }

        void mySocket_OnOpen(object sender, EventArgs e)
        {
            this.Hello(1);
        }

        public void Subscribe()
        {
        }

        public void Publish()
        {
        }

        public void Call()
        {
        }


        #region 이벤트들


        #region Connected

        public event EventHandler Connected;

        private void OnConnected()
        {
            if (Connected == null)
                return;

            Connected(this, null);
        }

        #endregion Connected


        #endregion 이벤트들

        public event EventHandler Event;
        public event EventHandler Subscribed;


        
    }
}

