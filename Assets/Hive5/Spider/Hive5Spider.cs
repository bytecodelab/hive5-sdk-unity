// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using WebSocketSharp;

namespace Hive5
{
    /// <summary>
    /// 구독용 Topic 종류
    /// </summary>
    public enum TopicKind
    {
        Channel,
        Private,
        Notice,
        System, // Hive5 System
    };

    public delegate void SpiderCallback(bool success);
    public delegate void CallResultCallback(bool success, CallResult result);

    /// <summary>
    /// Hive5의 Spider API에 대응하는 클래스
    /// </summary>
    public class Hive5Spider
    {
        #region 프로퍼티들

        public long SessionId { get; set; }

        public bool IsConnected { get; set; }

        #endregion 프로퍼티들


        #region 멤버들

        private static readonly string TopicPrefix = "io.hive5.spider.topic";

        private static readonly string TopicNameChannel = "channel";
        private static readonly string TopicNamePrivate = "private";
        private static readonly string TopicNameNotice = "notice";
        private static readonly string TopicNameSystem = "system";

        private const string RouterEndPoint = "ws://beta.spider.hive5.io:9201/channels/ws";

        private SpiderCallback connectedCallback;
        private SpiderCallback disconnectedCallback;

        private Hive5Client hive5Client { get; set; }
        private WebSocket mySocket { get; set; }

        #endregion 멤버들

        #region 생성자들

        public Hive5Spider(Hive5Client client)
        {
            if (client == null)
                throw new NullReferenceException();

            this.mySocket = new WebSocket(Hive5Spider.RouterEndPoint);
            this.mySocket.OnOpen += mySocket_OnOpen;
            this.mySocket.OnError += mySocket_OnError;
            this.mySocket.OnMessage += mySocket_OnMessage;
            this.mySocket.OnClose += mySocket_OnClose;

            this.hive5Client = client;
        }

        #endregion 생성자들


        #region 메서드들


        public string GetTopicUri(TopicKind kind)
        {
            string topicName = "";
            switch (kind)
            {
                case TopicKind.Channel:
                    topicName = TopicNameChannel;
                    break;

                case TopicKind.Notice:
                    topicName = TopicNameNotice;
                    break;

                case TopicKind.Private:
                    topicName = TopicNamePrivate;
                    break;

                case TopicKind.System:
                    topicName = TopicNameSystem;
                    break;
            }

            return string.Concat(Hive5Spider.TopicPrefix, ".", topicName);
        }


        #region Hello


        public void Hello(long channelId)
        {
            HelloMessage message = new HelloMessage()
            {
                Realm = new Realm(channelId),
                Detail = new HelloDetail()
                {
                    app_key = this.hive5Client.AppKey,
                    auth_token = this.hive5Client.AccessToken,
                    channel_id = channelId,
                    uuid = this.hive5Client.Uuid,
                },
            };

            string jsonMessage = message.ToJson();
            Logger.Log("Spider Hello: " + jsonMessage);
            this.mySocket.SendAsync(jsonMessage, helloCompleted);
        }

        private void helloCompleted(bool success)
        {
            if (success == false)
            {
                Logger.Log("Spider Hello 전송 실패 in HelloCompleted");
            }
            else
            {
                Logger.Log("Spider Hello 전송 성공 in HelloCompleted");
            }
        }

        #endregion Hello


        public void Connect(SpiderCallback callback)
        {
            connectedCallback = callback;
            mySocket.ConnectAsync();
        }

        public void Subscribe()
        {
        }


        #region Publish

        /// <summary>
        /// 공지메세지 전송
        /// </summary>
        /// <param name="appSecret"></param>
        /// <param name="contents"></param>
        public void SendNoticeMessage(string appSecret, Dictionary<string, object> contents, SpiderCallback callback)
        {
            Publish(TopicKind.Notice, new NoticePublishOptions() { secret = appSecret }, contents, callback);
        }

        /// <summary>
        /// 시스템메세지 전송
        /// </summary>
        /// <param name="contents"></param>
        public void SendSystemMessage(Dictionary<string, object> contents, SpiderCallback callback)
        {
            Publish(TopicKind.System, new SystemPublishOptions(), contents, callback);
        }

        /// <summary>
        /// 채널 안의 모두가 볼 수 있도록 메세지 전송
        /// </summary>
        /// <param name="contents"></param>
        public void SendChannelMessage(Dictionary<string, object> contents, SpiderCallback callback)
        {
            Publish(TopicKind.Channel, new ChannelPublishOptions(), contents, callback);
        }

        /// <summary>
        /// 채널 안의 특정 사람이 볼 수 있도록 전송
        /// </summary>
        /// <param name="contents"></param>
        public void SendPrivateMessage(Dictionary<string, object> contents, SpiderCallback callback)
        {
            Publish(TopicKind.Private, new PrivatePublishOptions(), contents, callback);
        }

        private Dictionary<long, SpiderCallback> publishRequestIdToCallback = new Dictionary<long, SpiderCallback>();

        private void Publish(TopicKind kind, PublishOptions options, Dictionary<string, object> content, SpiderCallback callback)
        {
            PublishMessage message = new PublishMessage()
            {
                TopicUri = GetTopicUri(kind),
                Options = options,
                Contents = content,
            };

            publishRequestIdToCallback.Add(message.RequestId, callback);

            string jsonMessage = message.ToJson();
            Logger.Log("Spider Publish: " + jsonMessage);
            mySocket.SendAsync(jsonMessage, (success) =>
                {
                    if (success == false)
                    {
                        Logger.Log("Spider Publish 전송 실패 in publishCompleted");

                        SpiderCallback registeredCallback = null;
                        if (publishRequestIdToCallback.TryGetValue(message.RequestId, out registeredCallback) == true)
                        {
                            publishRequestIdToCallback.Remove(message.RequestId);
                            registeredCallback(false);
                        }
                    }
                    else
                    {
                        Logger.Log("Spider Publish 전송 성공 in publishCompleted");
                    }
                });
        }

        #endregion Publish

        public void GetChannels(CallResultCallback callback)
        {
            this.call(CallUris.GetChannels, null, CallResultKind.GetChannelsResult, callback);
        }


        public void GetPlayers(CallResultCallback callback)
        {
            this.call(CallUris.GetPlayers, null, CallResultKind.GetPlayersResult, callback);
        }



        private Dictionary<long, CallResultCallbackNode> callRequestIdToCallbackNode = new Dictionary<long, CallResultCallbackNode>();

        private void call(string callUri, CallOptions options, CallResultKind resultKind, CallResultCallback callback)
        {
            if (options == null)
                options = new CallOptions();

            CallMessage callMessage = new CallMessage()
            {
                ProcedureUri = callUri,
                Options = options,
            };

            string jsonMessage = callMessage.ToJson();

            callRequestIdToCallbackNode.Add(callMessage.RequestId, new CallResultCallbackNode(resultKind, callback));
            mySocket.SendAsync(jsonMessage, (success) =>
            {
                if (success == false)
                {
                    Logger.Log("Spider call 전송 실패 in callCompleted");

                    CallResultCallbackNode registeredCallbackNode = null;
                    if (callRequestIdToCallbackNode.TryGetValue(callMessage.RequestId, out registeredCallbackNode) == true)
                    {
                        callRequestIdToCallbackNode.Remove(callMessage.RequestId);
                        registeredCallbackNode.Callback(false, null);
                    }
                }
                else
                {
                    Logger.Log("Spider call 전송 성공 in callCompleted");
                }
            });
        }

        #region Disconnect(GoodBye)

        public void Disconnect(SpiderCallback callback)
        {
            GoodbyeMessage message = new GoodbyeMessage();
            string jsonMessage = message.ToJson();

            disconnectedCallback = callback;
            mySocket.SendAsync(jsonMessage, goodbyeCompleted);
        }

        private void goodbyeCompleted(bool success)
        {
            if (success == false)
            {
                Logger.Log("Spider Goodbye 전송 실패 in goodbyeCompleted");
            }
            else
            {
                Logger.Log("Spider Goodbye 전송 성공 in goodbyeCompleted");
            }
        }

        #endregion Disconnect(GoodBye)

        #endregion 메서드들


        #region 이벤트핸들러들


        void mySocket_OnClose(object sender, CloseEventArgs e)
        {
        }

        void mySocket_OnMessage(object sender, MessageEventArgs e)
        {
            SpiderMessage message = MessageParser.Parse(e.Data);
            if (message == null)
                return;

            switch ((WampMessageCode)message.MessageCode)
            {
                case WampMessageCode.HELLO:
                    break;
                case WampMessageCode.WELCOME:
                    {
                        WelcomeMessage welcomeMessage = message as WelcomeMessage;
                        this.SessionId = welcomeMessage.SessionId;
                        this.IsConnected = true;
                       
                        if (connectedCallback != null)
                        {
                            connectedCallback(true);
                        }
                    }
                    break;
                case WampMessageCode.ABORT:
                    this.IsConnected = false;
                    break;
                case WampMessageCode.CHALLENGE:
                    break;
                case WampMessageCode.AUTHENTICATE:
                    break;
                case WampMessageCode.GOODBYE:
                    {
                        GoodbyeMessage goodbyeMessage = message as GoodbyeMessage;

                        this.IsConnected = false;
                        
                        if (disconnectedCallback != null)
                        {
                            disconnectedCallback(true);
                        }
                    }
                    break;
                case WampMessageCode.HEARTBEAT:
                    break;
                case WampMessageCode.ERROR:
                    break;
                case WampMessageCode.PUBLISH:
                    break;
                case WampMessageCode.PUBLISHED:
                    {
                        PublishedMessage publishedMessage = message as PublishedMessage;

                        SpiderCallback registeredCallback = null;
                        if (publishRequestIdToCallback.TryGetValue(publishedMessage.RequestId, out registeredCallback) == true)
                        {
                            publishRequestIdToCallback.Remove(publishedMessage.RequestId);
                            registeredCallback(true);
                        }
                    }
                    break;
                case WampMessageCode.SUBSCRIBE:
                    break;
                case WampMessageCode.SUBSCRIBED:
                    break;
                case WampMessageCode.UNSUBSCRIBE:
                    break;
                case WampMessageCode.UNSUBSCRIBED:
                    break;
                case WampMessageCode.EVENT:
                    break;
                case WampMessageCode.CALL:
                    break;
                case WampMessageCode.CANCEL:
                    break;
                case WampMessageCode.RESULT:
                    {
                        ResultMessage resultMessage = message as ResultMessage;

                        CallResultCallbackNode registeredCallbackNode = null;
                        if (callRequestIdToCallbackNode.TryGetValue(resultMessage.RequestId, out registeredCallbackNode) == true)
                        {
                            callRequestIdToCallbackNode.Remove(resultMessage.RequestId);

                            switch (registeredCallbackNode.Kind)
                            {
                                default:
                                case CallResultKind.Unknown:
                                    registeredCallbackNode.Callback(true, null);
                                    break;
                                case CallResultKind.GetChannelsResult:
                                    {
                                        GetChannelsResult result = new GetChannelsResult(resultMessage);
                                        registeredCallbackNode.Callback(true, result);
                                    }
                                    break;
                                case CallResultKind.GetPlayersResult:
                                    {
                                        GetPlayersResult result = new GetPlayersResult(resultMessage);
                                        registeredCallbackNode.Callback(true, result);
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case WampMessageCode.REGISTER:
                    break;
                case WampMessageCode.REGISTERED:
                    break;
                case WampMessageCode.UNREGISTER:
                    break;
                case WampMessageCode.UNREGISTERED:
                    break;
                case WampMessageCode.INVOCATION:
                    break;
                case WampMessageCode.INTERRUPT:
                    break;
                case WampMessageCode.YIELD:
                    break;
                default:
                    break;
            }

        }

        void mySocket_OnError(object sender, ErrorEventArgs e)
        {

        }

        void mySocket_OnOpen(object sender, EventArgs e)
        {
            this.Hello(1);
        }

        #endregion 이벤트핸들러들


        #region 이벤트들

        public event EventHandler Event;
        public event EventHandler Subscribed;

        #endregion 이벤트들
    }
}

